class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {

        int m = A.length;
        int n = B.length;

        int i=0;
        int j=0;

        List<List<Integer>> ans = new ArrayList();

        int a,b,c,d;

        while(i<m && j<n){
            a = A[i][0];
            b = A[i][1];
            c = B[j][0];
            d = B[j][1];

            if(a<c){
                if(b<c)i++;
                else {
                    if(d<b){
                        List<Integer> arr = new ArrayList();
                        arr.add(c);
                        arr.add(d);
                        ans.add(arr);
                        j++;
                    }
                    else {
                        List<Integer> arr = new ArrayList();
                        arr.add(c);
                        arr.add(b);
                        ans.add(arr);
                        i++;
                    }
                }
            }

            else {
                if(d<a)j++;
                else {
                    if(d>b){
                        List<Integer> arr = new ArrayList();
                        arr.add(a);
                        arr.add(b);
                        ans.add(arr);
                        i++;
                    }
                    else {
                        List<Integer> arr = new ArrayList();
                        arr.add(a);
                        arr.add(d);
                        ans.add(arr);
                        j++;
                    }
                }
            }

        }

        int ans1 [][]= new int [ans.size()][2];

        for (int t=0;t<ans.size();t++){
            ans1[t][0]=ans.get(t).get(0);
            ans1[t][1]=ans.get(t).get(1);;
        }

        return ans1;
    }
}